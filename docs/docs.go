// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "gongna",
            "url": "http://www.swagger.io/support",
            "email": "20364719155@qq.com"
        },
        "license": {
            "name": "Apache 2.0"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "输入学号和密码登录",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Login 用户登录接口",
                "parameters": [
                    {
                        "description": "登录的用户信息",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Person"
                        }
                    },
                    "400": {
                        "description": "{\"Code\":\"10002\", \"Message\":\"Error occurred while binding the request body to the struct. \"}",
                        "schema": {
                            "$ref": "#/definitions/apis.Response"
                        }
                    },
                    "500": {
                        "description": "{\"Code\":\"20002\", \"Message\":\"Database error:The student ID you entered is incorrect, please try again\"}",
                        "schema": {
                            "$ref": "#/definitions/apis.Response"
                        }
                    }
                }
            }
        },
        "/auth/spot/:id": {
            "put": {
                "description": "在URL中输入地标ID,Body里输入学号就可以实现更新用户个人的探索记录，不论是否探索过该地标都会得到地标的信息，实现了重复探索。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "UpdateSpotAndKnowNum 操作用户移动更新用户探索数据接口",
                "parameters": [
                    {
                        "description": "只输入学号",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Person"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Person"
                        }
                    },
                    "400": {
                        "description": "{\"Code\":\"10002\", \"Message\":\"Error occurred while binding the request body to the struct. \"}",
                        "schema": {
                            "$ref": "#/definitions/apis.Response"
                        }
                    },
                    "500": {
                        "description": "{\"Code\":\"20002\", \"Message\":\"Database error:The student ID you entered is incorrect, please try again .\"}",
                        "schema": {
                            "$ref": "#/definitions/apis.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apis.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Person": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "列名为 ` + "`" + `id` + "`" + `",
                    "type": "integer"
                },
                "num_of_know": {
                    "description": "列名为 ` + "`" + `num_of_know\"` + "`" + `",
                    "type": "integer"
                },
                "num_of_spot": {
                    "description": "列名为 ` + "`" + `num_of_spot` + "`" + `",
                    "type": "integer"
                },
                "password": {
                    "description": "列名为 ` + "`" + `password` + "`" + `",
                    "type": "string"
                },
                "student_id": {
                    "description": "列名为 ` + "`" + `student_id` + "`" + `",
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "8080",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "新生引导项目",
	Description: "新生引导项目API",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
